name: Deploy to VPS
on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare known_hosts for rsync
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Ensure APP_DIR exists on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            mkdir -p "${{ secrets.APP_DIR }}"
            ls -ld "${{ secrets.APP_DIR }}"

      - name: Sync source to server (exclude junk)
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -az --delete --exclude='.git' --exclude='node_modules'
          path: .
          remote_path: ${{ secrets.APP_DIR }}
          remote_host: ${{ secrets.SSH_HOST }}
          remote_user: ${{ secrets.SSH_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
          remote_port: ${{ secrets.SSH_PORT }}

      # Write .env.local using envs to avoid YAML/quoting issues with special chars
      - name: Write .env.local on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: APP_DIR,MONGODB_URI,JWT_SECRET
          script: |
            set -e
            cd "$APP_DIR"
            {
              echo "MONGODB_URI=${MONGODB_URI}"
              echo "JWT_SECRET=${JWT_SECRET}"
              echo "NODE_ENV=production"
              echo "PORT=3000"
            } > .env.local
            chmod 600 .env.local
            echo ".env.local written (values hidden)"

      - name: Build and (re)start with PM2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: APP_DIR
          script: |
            set -euo pipefail
            export NVM_DIR="$HOME/.nvm"
            if [ ! -s "$NVM_DIR/nvm.sh" ]; then
              curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            fi
            . "$NVM_DIR/nvm.sh"
            nvm install --lts >/dev/null

            cd "$APP_DIR"
            node -v && npm -v
            npm ci
            rm -rf .next
            npm run build

            # ensure exactly one instance, pinned to APP_DIR
            pm2 reload vipfuneralfunding || pm2 start "npm run start" --name vipfuneralfunding --cwd "$APP_DIR"
            pm2 save

            # quick local health check (won't fail job)
            curl -fsS -I http://127.0.0.1:3000 || true