name: Deploy to VPS
on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Explicit, valid checks (no dynamic indexing)
      - name: Validate required secrets
        run: |
          test -n "${{ secrets.APP_DIR }}" || { echo "::error::APP_DIR missing"; exit 1; }
          test -n "${{ secrets.SSH_HOST }}" || { echo "::error::SSH_HOST missing"; exit 1; }
          test -n "${{ secrets.SSH_USER }}" || { echo "::error::SSH_USER missing"; exit 1; }
          test -n "${{ secrets.SSH_PRIVATE_KEY }}" || { echo "::error::SSH_PRIVATE_KEY missing"; exit 1; }
          test -n "${{ secrets.SSH_PORT }}" || { echo "::error::SSH_PORT missing"; exit 1; }
          test -n "${{ secrets.MONGODB_URI }}" || { echo "::error::MONGODB_URI missing"; exit 1; }
          test -n "${{ secrets.JWT_SECRET }}" || { echo "::error::JWT_SECRET missing"; exit 1; }
          echo "APP_DIR=${{ secrets.APP_DIR }}"

      - name: Prepare known_hosts for rsync
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Ensure APP_DIR exists on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euxo pipefail
            mkdir -p "${{ secrets.APP_DIR }}"
            ls -ld "${{ secrets.APP_DIR }}"

      - name: Sync source to server (exclude junk)
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -az --delete --exclude='.git' --exclude='node_modules'
          path: .
          remote_path: ${{ secrets.APP_DIR }}
          remote_host: ${{ secrets.SSH_HOST }}
          remote_user: ${{ secrets.SSH_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
          remote_port: ${{ secrets.SSH_PORT }}

      # Write .env.local safely via env handoff (no YAML quoting issues)
      - name: Write .env.local on server
        uses: appleboy/ssh-action@v1.2.0
        env:
          APP_DIR: ${{ secrets.APP_DIR }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: APP_DIR,MONGODB_URI,JWT_SECRET
          script: |
            set -euxo pipefail
            cd "$APP_DIR"
            {
              echo "MONGODB_URI=${MONGODB_URI}"
              echo "JWT_SECRET=${JWT_SECRET}"
              echo "NODE_ENV=production"
              echo "PORT=3000"
            } > .env.local
            chmod 600 .env.local
            echo ".env.local written (values hidden)"

      - name: Build and (re)start with PM2
        uses: appleboy/ssh-action@v1.2.0
        env:
          APP_DIR: ${{ secrets.APP_DIR }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: APP_DIR
          script: |
            set -euxo pipefail
            export NVM_DIR="$HOME/.nvm"
            if [ ! -s "$NVM_DIR/nvm.sh" ]; then
              curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            fi
            . "$NVM_DIR/nvm.sh"
            nvm install --lts >/dev/null

            cd "$APP_DIR"
            node -v && npm -v
            npm ci
            rm -rf .next
            npm run build

            # Single instance, pinned to APP_DIR
            pm2 reload vipfuneralfunding || pm2 start "npm run start" --name vipfuneralfunding --cwd "$APP_DIR"
            pm2 save

            # Local health check (won't fail job)
            curl -fsS -I http://127.0.0.1:3000 || true
